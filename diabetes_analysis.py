# -*- coding: utf-8 -*-
"""Diabetes Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18my7LbQUObHId0voPf5W53xQsL_ebLtL

#CDC Diabetes Analysis

# Importing Libraries and Dataset
"""

#importing libaries and cvs file
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

pf=pd.read_csv('https://raw.githubusercontent.com/niteen11/DataAnalyticsAcademy/master/Python/dataset_diabetes/diabetic_data.csv')
pf.columns

pf.info()

pf.describe()

pf.head()

missing_values =pf.isnull().sum()
print(missing_values)

plt.figure(figsize=(12, 8))
missing_values.plot(kind='bar', color='salmon')
plt.title('Count of Missing Values per Column')
plt.xlabel('Columns')
plt.ylabel('Number of Missing Values')
plt.show()

duplicate_rows = pf.duplicated().sum()
print("Number of duplicate rows:", duplicate_rows)

columns_to_keep= ['encounter_id', 'patient_nbr', 'race', 'gender', 'age','weight','diabetesMed','time_in_hospital','number_outpatient', 'number_emergency', 'number_inpatient','metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',
       'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide',
       'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone',
       'tolazamide', 'examide', 'citoglipton', 'insulin',
       'glyburide-metformin', 'glipizide-metformin',
       'glimepiride-pioglitazone', 'metformin-rosiglitazone',
       'metformin-pioglitazone', 'change','readmitted']
new_pf= pf[columns_to_keep]
new_pf.head().T

columns_to_check = ['encounter_id', 'patient_nbr', 'race', 'gender', 'age', 'weight', 'diabetesMed', 'time_in_hospital', 'number_outpatient', 'number_emergency', 'number_inpatient', 'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide', 'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', 'examide', 'citoglipton', 'insulin', 'glyburide-metformin', 'glipizide-metformin', 'glimepiride-pioglitazone', 'metformin-rosiglitazone', 'metformin-pioglitazone', 'change', 'readmitted']

# Print unique values for each column
for column in columns_to_check:
    unique_values = new_pf[column].unique()
    print(f"Unique values in column '{column}':")
    print(unique_values)
    print("\n")

new_pf = new_pf.astype({col: 'string' for col in new_pf.select_dtypes(include='object').columns})
##new_pf['diabetesMed']=new_pf['diabetesMed'].astype(str)
##dia_pf=new_pf[new_pf['diabetesMed']=='Yes']
new_pf.info()

fig, axs = plt.subplots(1, 2, figsize=(14, 6))

sns.countplot(x='gender', hue='diabetesMed', data=new_pf, ax=axs[0])
axs[0].set_title('Distribution of Diabetes Medication Usage by Gender')
axs[0].set_xlabel('Gender')
axs[0].set_ylabel('Count')

sns.countplot(x='race', hue='diabetesMed', data=new_pf, ax=axs[1])
axs[1].set_title('Distribution of Diabetes Medication Usage by Race')
axs[1].set_xlabel('Race')
axs[1].set_ylabel('Count')

plt.tight_layout()
plt.show()

caucasians_df = new_pf[new_pf['race'] == 'Caucasian']
plt.figure(figsize=(14, 7))
sns.countplot(x='age', hue='diabetesMed', data=caucasians_df)
plt.title('Age Range Distribution by Diabetes Medication Usage (Caucasians)')
plt.xlabel('Age Range')
plt.ylabel('Count')
plt.legend(title='Diabetes Medication')
plt.show()

medication_columns = ['metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',
                      'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide',
                      'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone',
                      'tolazamide', 'examide', 'citoglipton', 'insulin',
                      'glyburide-metformin', 'glipizide-metformin',
                      'glimepiride-pioglitazone', 'metformin-rosiglitazone',
                      'metformin-pioglitazone']
medication_counts = caucasians_df[medication_columns].apply(pd.Series.value_counts).loc['Up']
medication_counts = medication_counts.fillna(0).astype(int)

plt.figure(figsize=(14, 7))
sns.barplot(x=medication_counts.index, y=medication_counts.values, palette='viridis')
plt.title('Counts of Diabetes Medications Usage Among Caucasians')
plt.xlabel('Medication')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

insulin_counts = caucasians_df[caucasians_df['insulin'] == 'Up'].groupby('age').size()
plt.figure(figsize=(14, 7))
sns.barplot(x=insulin_counts.index, y=insulin_counts.values, palette='viridis')
plt.title('Number of Caucasians Using Insulin by Age Range')
plt.xlabel('Age Range')
plt.ylabel('Count of Insulin Users')
plt.xticks(rotation=45)
plt.show()

readmission_counts = caucasians_df.groupby(['age', 'readmitted']).size().unstack(fill_value=0)

readmission_counts.plot(kind='bar', stacked=True, figsize=(14, 7), colormap='viridis')
plt.title('Readmissions by Age Range Among Caucasians')
plt.xlabel('Age Range')
plt.ylabel('Count')
plt.legend(title='Readmitted')
plt.xticks(rotation=45)
plt.show()